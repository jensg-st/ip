functions:
- id: nutanix
  image: gcr.io/direktiv/functions/nutanix:1.0
  type: knative-workflow
- id: fetchip
  workflow: ip-pool/fetch
  type: subflow
- id: linuxip
  workflow: ip-change/linux
  type: subflow
- id: windowsip
  workflow: ip-change/windows
  type: subflow

states:

# check taht name is present
- id: validate
  type: validate
  schema:
    title: VM
    type: object
    required: ["name"]
    properties:
      name:
        type: string
        title: VM name
  transition: print

# check by naming convention what OS it is
- id: print
  type: noop
  log: checking vm jq(.name)
  transition: check-valid
  transform: |-
    jq(.name as $f | .name | 
    if (index("Win_Dir_")) then { "name": $f, "os": "windows" } 
    elif (index("Lin_Dir_")) then { "name": $f, "os": "linux" }   
    else { "name": $f, "os": "unknown" } end  )

  
# stop if OS is unknown
- id: check-valid
  type: switch
  log: 'check for os: jq(.os)'
  conditions:
  - condition: jq(if .os == "unkown" then true else false end)
  defaultTransition: get-ip

# fetch actual ip from API
- id: get-ip
  type: action
  log: getting ip for vm jq(.name)
  action:
    function: nutanix
    secrets: ["nutanixpwd", "nutanixsvr", "nutanixusr"]
    input: 
      auth:
        host: https://10.54.61.37:9440
        password: jq(.secrets.nutanixpwd)
        username: jq(.secrets.nutanixusr)
        skipVerify: true
      api:
        path: /PrismGateway/services/rest/v2.0/vms/?filter=vm_name%3D%3Djq(.name)&include_vm_nic_config=true
        method: GET
  transform:
    ip: 'jq(.return.nutanix.entities[0].vm_nics[0].ip_address)'
    name: jq(.name)
    os: jq(.os)
  transition: fetch-ip

# get new IP from list
- id: fetch-ip
  type: action
  action:
    function: fetchip
  transform: 'jq(. + { "new": .return.ip } | del(.return))'
  transition: win-or-linux

# route based on OS
- id: win-or-linux
  type: switch
  conditions:
  - condition: jq(if .os == "windows" then true else false end)
    transition: change-ip-win
  - condition: jq(if .os == "linux" then true else false end)
    transition: change-ip-linux


- id: change-ip-linux
  type: action
  action:
    function: linuxip
    input:
      old: jq(.ip)
      new: jq(.new)
      mask: "25"
      gateway: 10.54.61.1

- id: change-ip-win
  type: action
  log: Windows VM jq(.name) IP change
  action:
    function: windowsip
    input:
      old: jq(.ip)
      new: jq(.new)



