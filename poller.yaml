functions:
- id: nutanix
  image: gcr.io/direktiv/functions/nutanix:1.0
  type: knative-workflow
- id: action
  type: subflow
  workflow: poller-action

states:

- id: get-check-time
  type: getter
  variables:
  - key: lastcheck
    scope: workflow
  transform:
    # set time to 0 if it does not exist
    time: jq(if (.var.lastcheck > 0) then .var.lastcheck else 0 end)
  transition: set-check-time
  
# set save time for next run
- id: set-check-time
  type: setter
  variables:
  - key: lastcheck
    scope: workflow
    value: jq(now * 1000000000)
  transition: token

# changes the IP from old to new
# it fails automatically after 30 seconds 
# because the connection is broken after changing the IP
- id: token 
  type: action
  log: fetching move token
  action:
    function: nutanix
    secrets: ["nutanixpwd"]
    input: 
      auth:
        host: https://10.54.61.111
        skipVerify: true
      api:
        path: "/move/v2/users/login"
        method: POST
        body: 
          Spec:
            UserName: admin
            Password: jq(.secrets.nutanixpwd)
  transform:
    token: jq(.return.nutanix.Status.Token)
    time: jq(.time)
  transition: fetch-events

- id: fetch-events 
  type: action
  log: fetching move events after jq(.time)
  action:
    function: nutanix
    input: 
      auth:
        host: https://10.54.61.111
        skipVerify: true
        token: jq(.token)
      api:
        path: "/move/v2/events"
        method: POST
        body: 
          Filter:
            EventNames:
            - Initiate Cutover
            EventStatus:
            - Completed
          PaginationCriteria:
            PageNumber: 1
            RecordsPerPage: 100
  transform:  
    # get vms after our last check but only names in an array
    events: jq(.time as $filter | [ .return.nutanix.Events.[] | select(.EndTime > $filter) | .VmName ])
    time: jq(.time)
#   transition: ip-iterate

# - id: ip-iterate
#   type: foreach
#   array: 'jq([.events[] | {name: .}])'
#   action:
#     function: action
#     input: jq(.)

